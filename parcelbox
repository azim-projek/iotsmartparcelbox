// Smart Parcel Box - ESP32 + Keypad + Servo + Ultrasonic + Telegram (Password Editable)
// Components: ESP32, MG996R Servo, HC-SR04 Ultrasonic, 4x4 Keypad

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ESP32Servo.h>
#include <Keypad.h>

// === WiFi & Telegram Settings ===
const char* WIFI_SSID = "realme GT NEO 3";
const char* WIFI_PASS = "miskinsangatke";
#define BOT_TOKEN "8259717729:AAGfa-sK4DOhWsJcyrXl2sO_QODNMwDc6wI"
#define CHAT_ID   "1034103142"

WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);

// === Ultrasonic Sensor Pins ===
#define TRIG_PIN 16
#define ECHO_PIN 34

// === Servo Pins ===
#define SERVO_DROP 17     // Top barrier servo
#define SERVO_DOOR 18     // Bottom door servo

Servo dropServo;
Servo doorServo;

// === Keypad Setup ===
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = {27, 14, 12, 13};
byte colPins[COLS] =  {32, 33, 25, 26};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// === Variables ===
long duration;
int distance;
const int threshold = 30;  // cm
bool parcelDetected = false;

String correctPassword = "1234";   // Default password
String enteredPassword = "";
unsigned long lastCheckTime = 0;
const unsigned long TELEGRAM_CHECK_INTERVAL = 2000; // 2s

// === Function to read Ultrasonic ===
int readUltrasonic() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH, 30000);
  return duration * 0.034 / 2;
}

// === Safe Servo Movement (works with both continuous & 180°) ===
void moveServo(Servo &servo, int angle, int delayTime = 1000) {
  servo.write(angle);
  delay(delayTime);
  servo.write(90);  // Stop / neutral position for continuous type
}

// === Telegram Message Handling ===
void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;

    if (chat_id != CHAT_ID) continue; // Ignore messages from unknown users

    if (text.startsWith("/setpass ")) {
      String newPass = text.substring(9); // Extract password
      if (newPass.length() >= 4 && newPass.length() <= 8) {
        correctPassword = newPass;
        bot.sendMessage(CHAT_ID, "🔑 Password updated to: " + correctPassword, "");
      } else {
        bot.sendMessage(CHAT_ID, "❌ Invalid password length (4-8 digits).", "");
      }
    } else if (text == "/getpass") {
      bot.sendMessage(CHAT_ID, "🔐 Current password: " + correctPassword, "");
    } else if (text == "/help") {
      bot.sendMessage(CHAT_ID,
        "📋 *Smart Parcel Box Commands:*\n"
        "/setpass <newpass> - Change password\n"
        "/getpass - Show current password\n"
        "/help - Show command list",
        "Markdown");
    }
  }
}

// === Setup ===
void setup() {
  Serial.begin(115200);

  // WiFi connection
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi Connected");
  client.setInsecure();

  // Setup pins and servos
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  dropServo.attach(SERVO_DROP);
  doorServo.attach(SERVO_DOOR);

  // Neutral position (stop spinning)
  dropServo.write(90);
  doorServo.write(90);

  bot.sendMessage(CHAT_ID, "📦 Smart Parcel Box System Online!\nUse /help for commands.", "");
}

// === Loop ===
void loop() {
  distance = readUltrasonic();
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Detect parcel
  if (distance > 0 && distance < threshold && !parcelDetected)
{
    parcelDetected = true;
    bot.sendMessage(CHAT_ID, "📦 Parcel detected! Dropping into storage...", "");
    
    moveServo(dropServo, 180, 1500);  // open/drop
    delay(500);

    bot.sendMessage(CHAT_ID, "✅ Parcel safely stored!", "");
  }

  // === Keypad input ===
char key = keypad.getKey();
if (key) {
  Serial.print("Key pressed: ");
  Serial.println(key);

  if (key == '#') {
    // '#' = Confirm password
    enteredPassword.trim();
    correctPassword.trim();

    Serial.print("Entered Password: '");
    Serial.print(enteredPassword);
    Serial.print("'  (len=");
    Serial.print(enteredPassword.length());
    Serial.println(")");

    Serial.print("Correct Password: '");
    Serial.print(correctPassword);
    Serial.print("'  (len=");
    Serial.print(correctPassword.length());
    Serial.println(")");

    if (enteredPassword == correctPassword) {
      Serial.println("✅ Correct password!");
      bot.sendMessage(CHAT_ID, "🔓 Correct password! Bottom door unlocked.", "");
      moveServo(doorServo, 0, 2500);  // open door
      delay(2000);
      moveServo(doorServo, 180, 2500); // close door again
      bot.sendMessage(CHAT_ID, "📭 Parcel retrieved. Door locked again.", "");
    } else {
      Serial.println("❌ Wrong password!");
      bot.sendMessage(CHAT_ID, "❌ Wrong password!", "");
    }

    enteredPassword = ""; // reset input
  } 
  else if (key == '*') {
    enteredPassword = "";
    Serial.println("Password cleared.");
  } 
  else {
    enteredPassword += key;
    Serial.print("Entered so far: ");
    Serial.println(enteredPassword);
  }
 }
}
