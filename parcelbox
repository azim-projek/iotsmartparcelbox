// =====================================================================
// 🧠 Smart Parcel Box - ESP32 + Keypad + Servo + Ultrasonic + Telegram
// ---------------------------------------------------------------------
// Features:
// - Detects parcel using ultrasonic sensor
// - Opens/closes door with two MG996R servos
// - Unlocks with keypad password
// - Sends notifications & controls via Telegram bot
// - Auto Wi-Fi reconnection
// =====================================================================

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ESP32Servo.h>
#include <Keypad.h>
#include "time.h"   // For NTP time


// === WiFi & Telegram Settings ===
const char* WIFI_SSID = "realme GT NEO 3";  // WiFi name
const char* WIFI_PASS = "miskinsangatke";   // WiFi password
#define BOT_TOKEN "8259717729:AAGfa-sK4DOhWsJcyrXl2sO_QODNMwDc6wI"  // Telegram bot token
#define CHAT_ID   "1034103142"  // Your Telegram user chat ID

// === NTP Time Settings ===
const char* ntpServer = "pool.ntp.org";  
const long gmtOffset_sec = 8 * 3600;     // Malaysia UTC+8
const int daylightOffset_sec = 0;


WiFiClientSecure client;                 // Secure client for HTTPS connection
UniversalTelegramBot bot(BOT_TOKEN, client);  // Initialize Telegram bot

// === Ultrasonic Sensor Pins ===
#define TRIG_PIN 16   // Trig pin of ultrasonic sensor
#define ECHO_PIN 34   // Echo pin of ultrasonic sensor

// === Servo Pins ===
#define SERVO_DROP 17   // Top servo for dropping parcel
#define SERVO_DOOR 18   // Bottom servo for main door

// === Door Lock Pin (relay or transistor) ===
#define LOCK_PIN 19     // Controls the solenoid door lock

Servo dropServo;        // Servo object for drop door
Servo doorServo;        // Servo object for main door

// === Keypad Setup ===
const byte ROWS = 4;  // 4 rows
const byte COLS = 4;  // 4 columns
char keys[ROWS][COLS] = {  // Define keypad layout
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

// Define which ESP32 pins connect to keypad
byte rowPins[ROWS] = {27, 14, 12, 13};
byte colPins[COLS] = {32, 33, 25, 26};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// === Variables ===
long duration;               // Time for ultrasonic echo
int distance;                // Calculated distance in cm
const int threshold = 15;    // Distance threshold to detect parcel
bool parcelDetected = false; // Flag to prevent duplicate detection

String correctPassword = "123";  // Default password
String enteredPassword = "";      // Stores user keypad input
unsigned long lastCheckTime = 0;  // Timer for Telegram message checking
const unsigned long TELEGRAM_CHECK_INTERVAL = 2000; // Check every 2s

String getTimeStamp() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    return "Time not available";
  }
  char buffer[30];
  strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", &timeinfo);
  return String(buffer);
}

// === Ultrasonic Distance Function ===
int readUltrasonic() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Measure pulse duration
  duration = pulseIn(ECHO_PIN, HIGH, 30000);
  return duration * 0.034 / 2; // Convert to cm
}

// === Servo Movement Function ===
void moveServo(Servo &servo, int angle, int delayTime = 1000) {
  servo.write(angle);
  delay(delayTime);
}

void moveBothServos() {
  dropServo.attach(SERVO_DROP);
  doorServo.attach(SERVO_DOOR);

  // Clockwise rotation (dropServo CW, doorServo CCW)
  dropServo.write(60);   // CW (<90)
  doorServo.write(120);  // CCW (>90)
  delay(1500);           // 3× longer for ~90° equivalent

  // Stop and hold 5 sec
  dropServo.write(90);
  doorServo.write(90);
  delay(5000);

  // Reverse direction (dropServo CCW, doorServo CW)
  dropServo.write(120);  // CCW (>90)
  doorServo.write(60);   // CW (<90)
  delay(1500);           // ~90° back

  // Full stop and HOLD for 5 seconds
  dropServo.write(90);
  doorServo.write(90);
  delay(5000);

  // Detach to stop signal
  dropServo.detach();
  doorServo.detach();
}


// === Wi-Fi Auto Reconnect ===
void ensureWiFiConnected() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("⚠️ WiFi lost. Reconnecting...");
    WiFi.disconnect();
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    unsigned long startAttemptTime = millis();

    // Try for 10 seconds
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
      delay(500);
      Serial.print(".");
    }

    // Report result
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\n✅ WiFi Reconnected!");
      bot.sendMessage(CHAT_ID, "📶 WiFi reconnected successfully!", "");
    } else {
      Serial.println("\n❌ Failed to reconnect.");
    }
  }
}

// === Telegram Commands ===
void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;
    if (chat_id != CHAT_ID) continue; // Ignore messages from others

    // /setpass command to change password
    if (text.startsWith("/setpass ")) {
      String newPass = text.substring(9);
      if (newPass.length() >= 4 && newPass.length() <= 8) {
        correctPassword = newPass;
        bot.sendMessage(CHAT_ID, "🔑 Password updated to: " + correctPassword, "");
      } else {
        bot.sendMessage(CHAT_ID, "❌ Invalid password length (4-8 digits).", "");
      }
    } 
    // /getpass command to show current password
    else if (text == "/getpass") {
      bot.sendMessage(CHAT_ID, "🔐 Current password: " + correctPassword, "");
    } 
    // /help command to show all commands
    else if (text == "/help") {
      bot.sendMessage(CHAT_ID,
        "📋 *Smart Parcel Box Commands:*\n"
        "/setpass <newpass> - Change password\n"
        "/getpass - Show current password\n"
        "/help - Show command list",
        "Markdown");
    }
  }
}

// === Setup Function ===
void setup() {
  Serial.begin(115200);
  keypad.setDebounceTime(10);  // Clean key press detection

  // Connect to Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);

  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi Connected");
  client.setInsecure(); // Disable SSL check

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.println("⏱️ NTP time configured");


  // Pin setup
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(LOCK_PIN, OUTPUT);
  digitalWrite(LOCK_PIN, LOW); // Lock is off initially

  // Initialize servo positions (not attached)
  dropServo.write(0);
  doorServo.write(0);

  // Telegram startup message
  bot.sendMessage(CHAT_ID, "📦 Smart Parcel Box System Online!\nUse /help for commands.", "");
}

// ============================================================
// 🔁 MAIN LOOP: Handles Wi-Fi, parcel detection, keypad input,
// and Telegram communication every cycle
// ============================================================

// === Main Loop (Optimized for keypad responsiveness) ===
void loop() {
  ensureWiFiConnected(); // Keep Wi-Fi alive

  // --- 🧮 Handle keypad FIRST for faster response ---
  char key = keypad.getKey();
  if (key) {
    Serial.print("Key pressed: ");
    Serial.println(key);

    if (key == '#') {  // Confirm entry
      enteredPassword.trim();
      correctPassword.trim();

      if (enteredPassword == correctPassword) {
        Serial.println("✅ Correct password!");
        bot.sendMessage(CHAT_ID, "🔓 Correct password! Unlocking door at " + getTimeStamp() + "\n", "");

        digitalWrite(LOCK_PIN, HIGH); // Unlock door
        delay(5000);                  // Keep unlocked for 5s
        digitalWrite(LOCK_PIN, LOW);  // Lock again
        bot.sendMessage(CHAT_ID, "📭 Door locked again. " + getTimeStamp() + "\n", "");
      } else {
        Serial.println("❌ Wrong password!");
        bot.sendMessage(CHAT_ID, "❌ Wrong password at " + getTimeStamp() + "\n", "");
      }

      enteredPassword = ""; // Clear after entry
    } 
    else if (key == '*') {  // Clear input
      enteredPassword = "";
      Serial.println("Password cleared.");
    } 
    else {  // Add character to password
      enteredPassword += key;
      Serial.print("Entered so far: ");
      Serial.println(enteredPassword);
    }
  }

  // --- 📦 Ultrasonic Parcel Detection ---
  distance = readUltrasonic();
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Detect new parcel
  if (distance > 0 && distance < threshold && !parcelDetected) {
    parcelDetected = true;
    bot.sendMessage(CHAT_ID, "📦 Parcel detected at " + getTimeStamp() + " ! Dropping into storage...\n", "");

    moveBothServos(); // Open & close sequence

    bot.sendMessage(CHAT_ID, "✅ Parcel safely stored at " + getTimeStamp() + "\n", "");
  }

  // Reset detection when parcel removed
  if (distance > (threshold + 5) && parcelDetected) {
    parcelDetected = false;
    Serial.println("🔁 Ready for next parcel");
  }

  // --- 💬 Telegram Message Check ---
  if (millis() - lastCheckTime > TELEGRAM_CHECK_INTERVAL) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastCheckTime = millis();
  }

  delay(50); // Faster loop for keypad responsiveness (was 350)
}
